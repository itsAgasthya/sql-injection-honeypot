"""
Vulnerability assessment module for system security analysis
"""

import logging
from datetime import datetime
import platform

logger = logging.getLogger(__name__)

class VulnerabilityAssessment:
    """Analyzes system data for security vulnerabilities"""
    
    def __init__(self, system_data):
        """Initialize with collected system data"""
        self.system_data = system_data
        self.risk_score = 0.0
        self.details = {
            'suspicious_processes': [],
            'open_ports': [],
            'failed_digital_signatures': [],
            'unknown_startup_items': [],
            'nmap_vulnerabilities': [],
            'event_log_flags': {'windows': [], 'linux': []}
        }
        
    def analyze_processes(self):
        """Analyze running processes for suspicious activity"""
        try:
            suspicious = []
            processes = self.system_data.get('processes', [])
            
            for proc in processes:
                # Check for high resource usage
                if proc.get('cpu_percent', 0) > 80 or proc.get('memory_percent', 0) > 80:
                    suspicious.append({
                        'pid': proc.get('pid'),
                        'name': proc.get('name'),
                        'reason': 'High resource usage',
                        'cpu': proc.get('cpu_percent'),
                        'memory': proc.get('memory_percent')
                    })
            
            self.details['suspicious_processes'] = suspicious
            return len(suspicious)
        except Exception as e:
            logger.error(f"Error analyzing processes: {str(e)}", exc_info=True)
            return 0
            
    def analyze_network(self):
        """Analyze network connections for potential threats"""
        try:
            risky_ports = []
            connections = self.system_data.get('network_connections', [])
            
            # Known risky ports
            high_risk_ports = {80, 443, 22, 3306, 5432}
            
            for conn in connections:
                try:
                    # Extract local port
                    if conn.get('laddr'):
                        port = int(conn['laddr'].split(':')[1])
                        if port in high_risk_ports:
                            risky_ports.append({
                                'port': port,
                                'address': conn['laddr'],
                                'status': conn['status'],
                                'risk': 'High risk port exposed'
                            })
                except Exception:
                    continue
            
            self.details['open_ports'] = risky_ports
            return len(risky_ports)
        except Exception as e:
            logger.error(f"Error analyzing network: {str(e)}", exc_info=True)
            return 0
            
    def analyze_system(self):
        """Analyze general system security"""
        try:
            risk_factors = []
            system_info = self.system_data.get('system', {})
            
            # Check system version
            if platform.system() == "Linux":
                # Add Linux-specific checks
                if self.system_data.get('logs'):
                    auth_log = self.system_data['logs'].get('auth.log', [])
                    for line in auth_log:
                        if 'Failed password' in line or 'authentication failure' in line:
                            self.details['event_log_flags']['linux'].append({
                                'type': 'Authentication Failure',
                                'log': line.strip()
                            })
            
            return len(risk_factors)
        except Exception as e:
            logger.error(f"Error analyzing system: {str(e)}", exc_info=True)
            return 0
    
    def compute_risk_score(self):
        """Compute overall risk score based on all factors"""
        try:
            # Analyze different aspects
            process_risks = self.analyze_processes()
            network_risks = self.analyze_network()
            system_risks = self.analyze_system()
            
            # Calculate weighted risk score (0.0 to 1.0)
            total_risks = process_risks + network_risks + system_risks
            max_expected_risks = 10  # Baseline for normalization
            
            self.risk_score = min(total_risks / max_expected_risks, 1.0)
            
            return self.risk_score
        except Exception as e:
            logger.error(f"Error computing risk score: {str(e)}", exc_info=True)
            return 0.0
    
    def get_report(self):
        """Generate a complete vulnerability assessment report"""
        try:
            # Ensure risk score is computed
            if self.risk_score == 0.0:
                self.compute_risk_score()
            
            # Determine severity level
            severity = 'LOW'
            if self.risk_score >= 0.8:
                severity = 'CRITICAL'
            elif self.risk_score >= 0.6:
                severity = 'HIGH'
            elif self.risk_score >= 0.4:
                severity = 'MEDIUM'
            
            return {
                'timestamp': datetime.now().isoformat(),
                'risk_score': self.risk_score,
                'severity': severity,
                'details': self.details,
                'system_info': self.system_data.get('system', {}),
                'recommendations': self._generate_recommendations()
            }
        except Exception as e:
            logger.error(f"Error generating report: {str(e)}", exc_info=True)
            return {
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }
    
    def _generate_recommendations(self):
        """Generate security recommendations based on findings"""
        recommendations = []
        
        if self.details['suspicious_processes']:
            recommendations.append({
                'category': 'Process Management',
                'suggestion': 'Review and monitor high-resource processes',
                'priority': 'High'
            })
            
        if self.details['open_ports']:
            recommendations.append({
                'category': 'Network Security',
                'suggestion': 'Review and secure exposed network ports',
                'priority': 'High'
            })
            
        if self.details['event_log_flags']['linux']:
            recommendations.append({
                'category': 'Authentication Security',
                'suggestion': 'Review failed login attempts and strengthen access controls',
                'priority': 'High'
            })
            
        return recommendations 